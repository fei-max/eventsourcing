---
import type { TweetResponse } from '../_types'
import { tweetResponseSchema } from '../_types.generated'
import Layout from '../layouts/Layout.astro';
import Tweet from '../components/Tweet.astro';
import { toWhiteboardTheWebTweets } from '../utils';

let fetchState: TweetResponse | 'error' = 'error';

try {
	const reqHeaders = new Headers()
	reqHeaders.set('Content-Type', 'application/json')
	reqHeaders.set('Authorization', `Bearer ${import.meta.env.TWITTER_API_TOKEN}`)

	const { data: { id: userId } } = await fetch('https://api.twitter.com/2/users/by/username/BHolmesDev', {
		method: 'GET',
		headers: reqHeaders,
	}).then(res => res.json())

	const userUrl = new URL(`https://api.twitter.com/2/users/${userId}/tweets`)
	userUrl.searchParams.set('expansions', 'attachments.media_keys')
	userUrl.searchParams.set('tweet.fields', 'entities')
	userUrl.searchParams.set('media.fields', 'variants')
	userUrl.searchParams.set('exclude', 'replies')
	userUrl.searchParams.set('max_results', '100')

	const rawResponse = await fetch(userUrl.toString(), {
		method: 'GET',
		headers: reqHeaders,
	}).then(res => res.json())
	fetchState = tweetResponseSchema.parse(rawResponse);
} catch (e) {
	console.error(e)
}
---
<Layout title="Welcome to Astro.">
	{fetchState === 'error' ? 'Ah!' : (
		<main>
			<h1>#WhiteboardtheWeb</h1>
			<div class="tweet-list">
				{toWhiteboardTheWebTweets(fetchState.data).map(tweet => <Tweet tweet={tweet} media={fetchState.includes.media} />)}
			</div>
		</main>
	)}
</Layout>

<style>

	h1 {
		margin: 2rem 0;
	}

	main {
		margin: auto;
    	padding: 1em;
		max-width: var(--content-max-width);
	}

	.tweet-list {
		/* max-width: var(--content-max-width);
		margin: auto; */
	}
</style>

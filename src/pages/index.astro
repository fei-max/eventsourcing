---
export const prerender = true;

import { getEditionInfo } from "~utils";
import Layout from "~layouts/Layout.astro";
import Card from "~components/Card.astro";
import CtaLink from "~components/CtaLink.astro";
import Video from "~components/Video";
import Subscribe from "../components/Subscribe.astro";
import { getCollection } from "astro:content";

const baseVideos = await getCollection("editions");
const videos = baseVideos.map((v) => ({
  ...v,
  sortableId: getEditionInfo(v.id)?.num ?? 0,
}));
---

<Layout title="#whiteboardtheweb" canonicalBase="" preconnectToYoutube={true}>
  <header>
    <h1 transition:name="heading" id="whiteboardtheweb__heading">
      #WhiteboardtheWeb
    </h1>
    <ul class="social-links" role="list">
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://www.youtube.com/@bholmesdev">YouTube</a
        >
      </li>
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://twitter.com/bholmesdev">Twitter</a
        >
      </li>
      <li>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://tiktok.com/@bholmesdev">TikTok</a
        >
      </li>
    </ul>
  </header>
  <Subscribe />
  <main class="list">
    {
      videos
        .sort((a, b) => a.sortableId - b.sortableId)
        .reverse()
        .map(async ({ id, slug, data, render }) => {
          const { Content, headings } = await render();
          return (
            <Card
              title={headings.find((h) => h.depth === 1)?.text}
              {slug}
              {...data}
            >
              <Content slot="body" />
              <Video
                slot="video"
                client:load
                title={headings.find((h) => h.depth === 1)?.text}
                editionInfo={getEditionInfo(id)}
                {...data.youtube}
              />
            </Card>
          );
        })
    }
    <CtaLink href="https://twitter.com/hashtag/whiteboardtheweb?f=live">
      Explore full #whiteboardtheweb archive
    </CtaLink>
  </main>
</Layout>

<script>
  import { colorIntersectionObserver } from "~utils";

  // shift bg color back to heading color
  // when heading scrolls into view
  const heading = document.getElementById("whiteboardtheweb__heading");
  if (heading) {
    const isTopOfPageObserver = colorIntersectionObserver(heading);
    isTopOfPageObserver.observe(heading);
  }
</script>

<style>
  header {
    display: grid;
    margin-block: 2rem;
  }

  h1 {
    margin: 0;
    font-size: var(--font-size-xxl) !important;
    color: hsl(var(--color-hs), 20%) !important;
    text-align: center;
  }

  .social-links {
    padding: 0;
    list-style: none;
    display: flex;
    gap: 1rem;
    justify-content: center;
  }

  .social-links a,
  .social-links a:visited {
    color: hsl(var(--color-hs), 40%);
    text-decoration: none;
    font-weight: 700;
    transition: opacity 0.2s;
  }

  .social-links a:hover {
    opacity: 0.7;
  }

  .list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .list :global(article):nth-child(4n + 1) {
    --color: var(--orange);
    --color-hs: var(--orange-hs);
  }

  .list :global(article):nth-child(4n + 2) {
    --color: var(--green);
    --color-hs: var(--green-hs);
  }

  .list :global(article):nth-child(4n + 3) {
    --color: var(--pink);
    --color-hs: var(--pink-hs);
  }

  .list :global(article):nth-child(4n + 4) {
    --color: var(--purple);
    --color-hs: var(--purple-hs);
  }
</style>

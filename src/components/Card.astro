---
import type { VideoFrontmatter } from '../_types';
import { toRandomNotUglyColor } from '../utils';
import Video from '../components/Video';
import CtaLink from './CtaLink.astro';

type Props = VideoFrontmatter & {
  url?: string;
  title?: string;
  showTitleAsHeading?: boolean;
  htmlBody: string;
}

const {
  title,
  twitter,
  showTitleAsHeading = true,
  youtube,
  url,
  htmlBody,
} = Astro.props;
---
<article>
  <figure class="video-container">
    {youtube ? (
      <Video client:load src={youtube} type='youtube' title={title}>
      </Video>
    ) : null}
  </figure>
  <div class="body-container">
    {title && showTitleAsHeading ? <h2>{title}</h2> : null}
    <Fragment set:html={htmlBody} />
  </div>
  <div class="ctas">
  {url ? <CtaLink href={url}>Permalink</CtaLink> : null}
  {twitter ? <CtaLink href={twitter} target="_blank" rel="noreferrer">Twitter</CtaLink> : null}
  {youtube ? <CtaLink href={youtube} target="_blank" rel="noreferrer">YouTube</CtaLink> : null}
</div>
</article>

<style define:vars={{ randomColor: toRandomNotUglyColor() }}>
  article {
    --color: var(--cardColor, var(--randomColor));
    position: relative;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr max-content;
    grid-template-areas: 'video body'
                         'video ctas';
    border-radius: 1.8rem;
    transition: border 0.2s;
    padding: 1.5rem;
    column-gap: 1.5rem;
    background-color: #F8F9FD;
  }

  @media(max-width: 600px) {
    article {
      grid-template-columns: 1fr;
      grid-template-rows: unset;
      grid-template-areas: 'body'
                          'video'
                          'ctas';
      row-gap: 1rem;
    }
  }
  
  article::before {
    content: '';
    position: absolute;
    inset: 1px;
    background-color: #E8EFF0;
    z-index: -1;
    border-radius: inherit;
    transform: translateY(4px);
    transition: transform 0.2s, background-color 0.2s;
  }
  
  article::after {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0;
    border-radius: 2rem;
    background: red;
    background: linear-gradient(0, var(--color) 50%,#F8F9FD 50%);
    background-size: 100% 200%;
    transition: background-position-y 0.2s, inset 0.2s;
  }

  article[data-video-playing]::after {
    inset: -0.2rem;
    background-position-y: 100%;
  }

  article[data-video-playing]::before {
    transform: translateY(0);
    background-color: var(--color);
  }
  .video-container {
    grid-area: video;
  }
  figure {
    position: relative;
    margin: 0;
    display: grid;
  }
  figcaption {
    font-style: italic;
  }
  .body-container {
    grid-area: body;
  }

  .ctas {
    grid-area: ctas;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    justify-content: flex-end;
    max-width: 10rem;
    margin-inline-start: auto;
  }
</style>
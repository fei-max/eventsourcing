---
import { toRandomNotUglyColor } from '../utils';
import type { Tweet, TweetResponse, Media } from '../_types';
import RightArrowCircle from './icons/RightArrowCircle.astro';
import Video from '../components/Video';

export type Props = {
  tweet: Tweet;
  media: TweetResponse['includes']['media'];
}

const { tweet, media } = Astro.props as Props

function getFirstVideo(mediaKeys: string[]): Media & { type: 'video' } | null {
  for (const mediaKey of mediaKeys) {
    const match = media.find(m => m.media_key === mediaKey)
    if (match?.type === 'video') return match
  }
  return null
}

const videoInfo = getFirstVideo(tweet.attachments?.media_keys ?? [])
---
<article>
  {videoInfo ? (
    <figure class="video-container">
      <Video client:load variants={videoInfo.variants} />
    </figure>
  ) : null}
  <div class="tweet-container">
    {tweet.text.split('\n').map(paragraph => <p>{paragraph}</p>)}
  </div>
  <a class="cta" href={`https://twitter.com/bholmesdev/status/${tweet.id}`}>Share on twitter <RightArrowCircle /></a>
</article>

<style define:vars={{ color: toRandomNotUglyColor(), test: '331, 96%' }}>
  article {
    position: relative;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr max-content;
    grid-template-areas: 'video tweet'
                         'video cta';
    border-radius: 1.8rem;
    transition: border 0.2s;
    padding: 1.5rem;
    column-gap: 1.5rem;
    background-color: #F8F9FD;
  }

  @media(max-width: 600px) {
    article {
      grid-template-columns: 1fr;
      grid-template-rows: unset;
      grid-template-areas: 'tweet'
                          'video'
                          'cta';
      row-gap: 1rem;
    }
  }
  
  article::before {
    content: '';
    position: absolute;
    inset: 1px;
    background-color: #E8EFF0;
    z-index: -1;
    border-radius: inherit;
    transform: translateY(4px);
    transition: transform 0.2s, background-color 0.2s;
  }
  
  article::after {
    content: '';
    position: absolute;
    z-index: -1;
    inset: 0;
    border-radius: 2rem;
    background: red;
    background: linear-gradient(0, var(--color) 50%,#F8F9FD 50%);
    background-size: 100% 200%;
    transition: background-position-y 0.2s, inset 0.2s;
  }

  article[data-video-playing]::after {
    inset: -0.2rem;
    background-position-y: 100%;
  }

  article[data-video-playing]::before {
    transform: translateY(0);
    background-color: var(--color);
  }
  .video-container {
    grid-area: video;
  }
  figure {
    margin: 0;
  }
  figcaption {
    font-style: italic;
  }
  article :global(video) {
    display: block;
    width: 100%;
    aspect-ratio: 9 / 16;
    border-radius: 0.5rem;
  }
  .tweet-container {
    grid-area: tweet;
  }
  .cta, .cta:visited {
    grid-area: cta;
    text-decoration: none;
    color: rgb(76, 81, 82);
    font-weight: 700;
    padding: 0.4rem;
    padding-inline-start: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    border: 2px solid currentColor;
    border-radius: 9e9px;
    background: linear-gradient(90deg, transparent 50%, var(--color) 50%);
    background-size: 200% 100%;
    transition-property: background-position-x, color, border-color;
    transition-duration: 0.2s;
  }
  
  .cta:hover, .cta:focus-visible {
    background-position-x: -100%;
    color: white;
    border-color: var(--color);
  }
</style>